Shortest Subsequence
Send Feedback
Gary has two string S and V. Now, Gary wants to know the length shortest subsequence in S, which is not a subsequence in V.
Note: The input data will be such that there will always be a solution.
Input Format :
The first line of input contains a string, that denotes the value of S. The following line contains a string, that denotes the value of V.
Output Format :
Length of shortest subsequence in S such that it is not a subsequence in V
Constraints:
1 <= |S| <= 1000 (|x| implies the length of the string x)
1 <= |V| <= 1000 
Time Limit: 1 second
Sample Input 1:
babab
babba
Sample Output 1:
3
Explanation:
"aab" is the shortest subsequence which is present in S and absent in V.

Solution:
===============================================
by rescursion:
public class Solution {

	public int solve(String S,String V){
        
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
		if(S.length() == 0) {
			return Integer.MAX_VALUE;
		}
		if(V.length()==0)
			return 1;
		int k=Integer.MAX_VALUE;
        //search for first letter of s in v
		for(int i=0;i<V.length();i++) {
			if( V.charAt(i) == S.charAt(0) ) {
				k = i;
				break;
			}
		}
		if(k==Integer.MAX_VALUE) {
			return 1;
		}
		//1st case when 1st letter is part of the subsequence
		int count1 = solve(S.substring(1), V);
        //2nd case when 1st letter is not part of the subsequence
		int count2 = solve(S.substring(1), V.substring(k+ 1));
		if(count2!=Integer.MAX_VALUE) {
			count2++;
		}
		return Math.min(count1, count2);
	}
	
}
===========================================================
Memoization
import java.util.Arrays;
public class Solution {

public int solve(String S,String V){

		int[][] storage = new int[S.length()+1][V.length()+1];
		for(int[] i : storage) {
			Arrays.fill(i, -1);
		}
		return solve(S, V, storage);


	}
	public int solve(String S,String V,int[][] storage){
		int m = S.length();
		int n = V.length();
		if(storage[m][n]!=-1) {
			return storage[m][n];
		}

		if(S.length()==0) {
			storage[m][n] = Integer.MAX_VALUE;
			return storage[m][n];
		}
		if(V.length()==0) {
			storage[m][n] = 1;
			return storage[m][n];
		}
		int k = Integer.MAX_VALUE;
        //search for 1st character of S in v and store the index at k 
		for(int i=0;i<V.length();i++) {

			if( V.charAt(i) == S.charAt(0)) {
				k = i;
				break;
			}

		}
		if(k==Integer.MAX_VALUE) {
			storage[m][n]= 1;
			return storage[m][n];
		}
        //1st case when 1st character of S is not part of substring
		int count1 = solve(S.substring(1), V, storage);
        //2nd case when 1st character is part of the substring
		int count2 = solve(S.substring(1), V.substring(k+1), storage);

		if(count2!=Integer.MAX_VALUE) {
			count2++;
		}
		storage[m][n] =  Math.min(count1, count2);
		return storage[m][n];
	}	
	
}
===================================================================================
DP
public class Solution {

public static int solve(String S,String V){

		int  m = S.length();
		int n = V.length();
		int[][] storage = new int[m+1][n+1];
        //when 1st String S is empty
		for(int i=0;i<=n;i++) {
			storage[0][i] = Integer.MAX_VALUE; 
		}
        //when 2nd String V is empty
		for(int i=0;i<=m;i++) {
			storage[i][0] = 1;
		}
		for(int i=1;i<=m;i++) {
			for(int j=1;j<=n;j++) {

				int k = Integer.MAX_VALUE;
                //search for m-i string of S in V
				for(int l=j-1;l>=0;l--) {
					if( S.charAt(m-i) == V.charAt(l)) {
						k = l;
						break;
					}
				}
				if(k==Integer.MAX_VALUE) {
					storage[i][j] = 1;
					continue;
				}
				int count1 = storage[i-1][j];
				int count2 = Integer.MAX_VALUE;
				count2 = storage[i-1][k];
				if(count2!=Integer.MAX_VALUE) {
					count2++;
				}
				storage[i][j] = Math.min(count1, count2);

			}
		}
		return storage[m][n];

	}
	
}