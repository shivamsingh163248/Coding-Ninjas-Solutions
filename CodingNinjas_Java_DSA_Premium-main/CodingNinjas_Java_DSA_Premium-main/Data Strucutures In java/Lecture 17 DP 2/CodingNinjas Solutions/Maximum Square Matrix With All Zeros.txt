Maximum Square Matrix With All Zeros
Send Feedback
Given an NxM matrix that contains only 0s and 1s, find out the size of the maximum square sub-matrix with all 0s. You need to return the size of the square matrix with all 0s.
Input format :
The first line of the test case contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively.

Second-line onwards, the next 'N' lines or rows represent the ith row values.

Each of the ith rows constitutes column values separated by a single space (Either 0 or 1).
Output Format:
Print the size of maximum square sub-matrix.
 Constraints :
0 <= N <= 10^4
0 <= M <= 10^4

Time Limit: 1 sec
Sample Input 1:
3 3
1 1 0
1 1 1
1 1 1
Sample Output 1:
1
Sample Input 2:
4 4
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
Sample Output 2:
4
Solution:
DP///

public class Solution {
	

	 public static int findMaxSquareWithAllZeros(int[][] input){
         //check for empty array first
         if(input.length==0 || input[0].length==0) return 0;

        int[][] storage = new int[input.length][input[0].length];
        int max = Integer.MIN_VALUE;
         //Initialize first column if it is 0 then 1 else 0
        for(int i=0;i<input.length;i++) {
            storage[i][0] = input[i][0] ==0 ? 1: 0;
            max = Math.max(storage[i][0], max);
        }
         //Initialize first row if it is 0 then 1 else 0
        for(int i=0;i<input[0].length;i++) {
            storage[0][i] = input[0][i] ==0 ? 1: 0;
            max = Math.max(storage[0][i], max);
        }


        for(int i=1;i<input.length;i++) {
            for(int j=1;j<input[0].length;j++ ) {
                if(input[i][j]==1){
					storage[i][j] = 0;
                }
                else{
                    storage[i][j] = Math.min(Math.min(storage[i-1][j-1], storage[i-1][j] ),
                                             storage[i][j-1]
                                            ) + 1 ;
                }
                max = Math.max(storage[i][j], max);

            }
        }
        return max;

    }

	
}
